################################################################################################
## Bayesian latent-class model code for three diagnostic tests and one population (3T1P)
################################################################################################

#######################################################
## Definition of the variables in the model
#######################################################

var p[N], q[N,8], pr[N], L[N],checks[N,16]; 

# N    <- observations (N = 110 patients)
# p    <- individual samples
# q    <- different combinations of test results
# prc  <- prevalence
# s    <- test sensitivities
# c    <- test specificities
# covs <- conditional dependency between tests sensitivities
# covc <- conditional dependency between tests specificities
# m.ca <- data set name

#######################################################
## Modelling the different probabilities of combinations of tests results 
#######################################################
                   
model {
  
  for(i in 1:N){
     
  q[i,1]<-prc*(s1*s2*s3+covs12+covs13+covs23)+(1-prc)*((1-c1)*(1-c2)*(1-c3)+covc12+covc13+covc23);
  q[i,2]<-prc*(s1*s2*(1-s3)+covs12-covs13-covs23)+(1-prc)*((1-c1)*(1-c2)*c3+covc12-covc13-covc23);
  q[i,3]<-prc*(s1*(1-s2)*s3-covs12+covs13-covs23)+(1-prc)*((1-c1)*c2*(1-c3)-covc12+covc13-covc23);
  q[i,4]<-prc*(s1*(1-s2)*(1-s3)-covs12-covs13+covs23)+(1-prc)*((1-c1)*c2*c3-covc12-covc13+covc23);
  q[i,5]<-prc*((1-s1)*s2*s3-covs12-covs13+covs23)+(1-prc)*(c1*(1-c2)*(1-c3)-covc12-covc13+covc23);
  q[i,6]<-prc*((1-s1)*s2*(1-s3)-covs12+covs13-covs23)+(1-prc)*(c1*(1-c2)*c3-covc12+covc13-covc23);
  q[i,7]<-prc*((1-s1)*(1-s2)*s3+covs12-covs13-covs23)+(1-prc)*(c1*c2*(1-c3)+covc12-covc13-covc23);
  q[i,8]<-prc*((1-s1)*(1-s2)*(1-s3)+covs12+covs13+covs23)+(1-prc)*(c1*c2*c3+covc12+covc13+covc23);

#######################################################
## Check and correct potential errors of probabilities exceeding (0,1) bounds 
#######################################################

  checks[i,1]<-   s1*s2*s3+covs12+covs13+covs23;
  checks[i,2]<-   (1-c1)*(1-c2)*(1-c3)+covc12+covc13+covc23;
  checks[i,3]<-  s1*s2*(1-s3)+covs12-covs13-covs23;
  checks[i,4]<-  (1-c1)*(1-c2)*c3+covc12-covc13-covc23;
  checks[i,5]<-  s1*(1-s2)*s3-covs12+covs13-covs23;
  checks[i,6]<-  (1-c1)*c2*(1-c3)-covc12+covc13-covc23;
  checks[i,7]<-  s1*(1-s2)*(1-s3)-covs12-covs13+covs23;
  checks[i,8]<-  (1-c1)*c2*c3-covc12-covc13+covc23;
  checks[i,9]<-  (1-s1)*s2*s3-covs12-covs13+covs23;
  checks[i,10]<- c1*(1-c2)*(1-c3)-covc12-covc13+covc23;
  checks[i,11]<- (1-s1)*s2*(1-s3)-covs12+covs13-covs23;
  checks[i,12]<- c1*(1-c2)*c3-covc12+covc13-covc23;
  checks[i,13]<- (1-s1)*(1-s2)*s3+covs12-covs13-covs23;
  checks[i,14]<- c1*c2*(1-c3)+covc12-covc13-covc23;
  checks[i,15]<- (1-s1)*(1-s2)*(1-s3)+covs12+covs13+covs23;
  checks[i,16]<- c1*c2*c3+covc12+covc13+covc23;

  valid[i]<- step(1-q[i,1])*step(q[i,1])*
             step(1-q[i,2])*step(q[i,2])*
             step(1-q[i,3])*step(q[i,3])* 
             step(1-q[i,4])*step(q[i,4])*
             step(1-q[i,5])*step(q[i,5])*
             step(1-q[i,6])*step(q[i,6])*
             step(1-q[i,7])*step(q[i,7])*
             step(1-q[i,8])*step(q[i,8])*
             step(1-checks[i,1])*step(checks[i,1])*
             step(1-checks[i,2])*step(checks[i,2])*
             step(1-checks[i,3])*step(checks[i,3])*
             step(1-checks[i,4])*step(checks[i,4])*
             step(1-checks[i,5])*step(checks[i,5])*
             step(1-checks[i,6])*step(checks[i,6])*
             step(1-checks[i,7])*step(checks[i,7])*
             step(1-checks[i,8])*step(checks[i,8])*
             step(1-checks[i,9])*step(checks[i,9])*
             step(1-checks[i,10])*step(checks[i,10])*
             step(1-checks[i,11])*step(checks[i,11])*
             step(1-checks[i,12])*step(checks[i,12])*
             step(1-checks[i,13])*step(checks[i,13])*
             step(1-checks[i,14])*step(checks[i,14])*
             step(1-checks[i,15])*step(checks[i,15])*
             step(1-checks[i,16])*step(checks[i,16]);
 
#######################################################
## Contribution to the likelihood for each observation
#######################################################

  L[i]<- equals(valid[i],1)*(
           equals(m.ca [i,1],1)*equals(m.ca[i,2],1)*equals(m.ca [i,3],1)*q[i,1]
         + equals(m.ca [i,1],1)*equals(m.ca[i,2],1)*equals(m.ca [i,3],0)*q[i,2]
         + equals(m.ca [i,1],1)*equals(m.ca[i,2],0)*equals(m.ca [i,3],1)*q[i,3]
         + equals(m.ca [i,1],1)*equals(m.ca[i,2],0)*equals(m.ca [i,3],0)*q[i,4]
         + equals(m.ca [i,1],0)*equals(m.ca[i,2],1)*equals(m.ca [i,3],1)*q[i,5]
         + equals(m.ca [i,1],0)*equals(m.ca[i,2],1)*equals(m.ca [i,3],0)*q[i,6]
         + equals(m.ca [i,1],0)*equals(m.ca[i,2],0)*equals(m.ca [i,3],1)*q[i,7]
         + equals(m.ca [i,1],0)*equals(m.ca[i,2],0)*equals(m.ca [i,3],0)*q[i,8]
        ) +(1-equals(valid[i],1)) *(1e-14);
  

#######################################################
## Trick to ensure the probabilities are always less than 1
#######################################################
 
p[i] <- L[i] / 1;## divided by a constant just to ensure all p's <1
   ones[i] ~ dbern(p[i]);     

  }
 
#######################################################
## Definition of model priors which should be modified for sensitivity analysis.
## Assuming a uniform distribution for the covariance terms.
## Assuming a beta distribution for prevalence and test accuracy estimates.
## Parameters of the beta prior distribution obtained by Betabuster
## https://betabuster.software.informer.com/1.0/
#######################################################
 
  covs12 <- 0;
  covs13 <- 0;
  covs23 ~ dunif(-1,1); # flat, uninformative
  covc12 <- 0;
  covc13 <- 0;
  covc23 <- 0;
  
  prc ~ dbeta(19.1093,13.0729);      # Prev 95%; >0.45, m 0.6
  c1  ~ dbeta(21.201,2.0633);        # SP RT-PCR 95%; >0.8, m 0.95
  c2  ~ dbeta(1,1);                  # SP IGG flat, uninformative
  c3  ~ dbeta(1,1);                  # SP IGM flat, uninformative
  s1  ~ dbeta(3.0476,1.5119);        # SE RT-PCR 95%; >0.3, m 0.8
  s2  ~ dbeta(4.8416,3.5611);        # SE IGG 95%; >0.3, m 0.6
  s3  ~ dbeta(4.8416,3.5611);        # SE IGM 95%; >0.3, m 0.6
  
  logL<-sum(log(p[1:N])); 
  
    }  
    
